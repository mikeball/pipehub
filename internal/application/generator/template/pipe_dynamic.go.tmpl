{{- define "pipe_dynamic.go" -}}
// Code generated by pipehub; DO NOT EDIT.
// +build pipe

package pipehub
{{ if gt (len .Pipe) 0 }}
import (
  "github.com/pkg/errors"
{{ range .Pipe }}
{{- if .ImportPathAlias }}
  {{ .ImportPathAlias }} "{{ if .Module }}{{ .Module }}{{ else }}{{ .ImportPath }}{{ end }}"
{{- else }}
  "{{ if .Module }}{{ .Module }}{{ else }}{{ .ImportPath }}{{ end }}"
{{- end }}
{{- end }}
)
{{ end }}
func (pm *pipeManager) fetchPipes() error {
{{- range .Pipe }}
  {
    cfg := pm.fetchConfig("{{ .ImportPath }}", "{{ if .Module }}{{ .Module }}{{ else }}{{ .Revision }}{{ end }}")
    client, err := {{ .Alias }}.NewClient(cfg)
    if err != nil {
      return errors.Wrap(err, "'{{ if .Module }}{{ .Module }}{{ else }}{{ .ImportPath }}{{ end }}' initialization error")
    }

    pm.pipes = append(pm.pipes, pipe {
      instance: client,
      alias:    "{{ .Alias }}",
    })
  }
{{ end }}
  return nil
}
{{- end -}}