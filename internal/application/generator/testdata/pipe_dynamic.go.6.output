// Code generated by pipehub; DO NOT EDIT.
// +build pipe

package pipehub

import (
  "github.com/pkg/errors"

  "github.com/diegobernardes/loadbalancer"
  "github.com/diegobernardes/proxy"
  "github.com/diegobernardes/ratelimit"
  "pipehub/pipehub"
  newpipe "pipehub/sample"
)

func (pm *pipeManager) fetchPipes() error {
  {
    cfg := pm.fetchConfig("github.com/diegobernardes/loadbalancer", "0.5.0")
    client, err := loadbalancer.NewClient(cfg)
    if err != nil {
      return errors.Wrap(err, "'github.com/diegobernardes/loadbalancer' initialization error")
    }

    pm.pipes = append(pm.pipes, pipe {
      instance: client,
      alias:    "loadbalancer",
    })
  }

  {
    cfg := pm.fetchConfig("github.com/diegobernardes/proxy", "0.7.0")
    client, err := proxy.NewClient(cfg)
    if err != nil {
      return errors.Wrap(err, "'github.com/diegobernardes/proxy' initialization error")
    }

    pm.pipes = append(pm.pipes, pipe {
      instance: client,
      alias:    "proxy",
    })
  }

  {
    cfg := pm.fetchConfig("github.com/diegobernardes/ratelimit", "0.6.0")
    client, err := ratelimit.NewClient(cfg)
    if err != nil {
      return errors.Wrap(err, "'github.com/diegobernardes/ratelimit' initialization error")
    }

    pm.pipes = append(pm.pipes, pipe {
      instance: client,
      alias:    "ratelimit",
    })
  }

  {
    cfg := pm.fetchConfig("github.com/pipehub/pipehub", "pipehub/pipehub")
    client, err := pipehub.NewClient(cfg)
    if err != nil {
      return errors.Wrap(err, "'pipehub/pipehub' initialization error")
    }

    pm.pipes = append(pm.pipes, pipe {
      instance: client,
      alias:    "pipehub",
    })
  }

  {
    cfg := pm.fetchConfig("github.com/pipehub/sample", "pipehub/sample")
    client, err := newpipe.NewClient(cfg)
    if err != nil {
      return errors.Wrap(err, "'pipehub/sample' initialization error")
    }

    pm.pipes = append(pm.pipes, pipe {
      instance: client,
      alias:    "newpipe",
    })
  }

  return nil
}